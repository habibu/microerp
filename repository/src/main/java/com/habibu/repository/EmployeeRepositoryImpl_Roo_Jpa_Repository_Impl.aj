// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.habibu.repository;

import com.habibu.model.Employee;
import com.habibu.model.QEmployee;
import com.habibu.repository.EmployeeRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EmployeeRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: EmployeeRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.CITY = "city";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.COUNTRY = "country";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.CODE = "code";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.QUANTITY_PER_UNIT = "quantityPerUnit";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.UNIT_COST = "unitCost";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.UNIT_PRICE = "unitPrice";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.UNITS_IN_STOCK = "unitsInStock";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.REORDER_LEVEL = "reorderLevel";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.FIRST_NAME = "firstName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.LAST_NAME = "lastName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.TITLE = "title";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.BIRTH_DATE = "birthDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.HIRE_DATE = "hireDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.EXTENSION = "extension";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.FOTO = "foto";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.NOTES = "notes";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Employee> EmployeeRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QEmployee employee = QEmployee.employee;
        
        JPQLQuery<Employee> query = from(employee);
        
        Path<?>[] paths = new Path<?>[] {employee.city,employee.country,employee.name,employee.code,employee.quantityPerUnit,employee.unitCost,employee.unitPrice,employee.unitsInStock,employee.reorderLevel,employee.firstName,employee.lastName,employee.title,employee.birthDate,employee.hireDate,employee.extension,employee.foto,employee.notes};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CITY, employee.city)
			.map(COUNTRY, employee.country)
			.map(NAME, employee.name)
			.map(CODE, employee.code)
			.map(QUANTITY_PER_UNIT, employee.quantityPerUnit)
			.map(UNIT_COST, employee.unitCost)
			.map(UNIT_PRICE, employee.unitPrice)
			.map(UNITS_IN_STOCK, employee.unitsInStock)
			.map(REORDER_LEVEL, employee.reorderLevel)
			.map(FIRST_NAME, employee.firstName)
			.map(LAST_NAME, employee.lastName)
			.map(TITLE, employee.title)
			.map(BIRTH_DATE, employee.birthDate)
			.map(HIRE_DATE, employee.hireDate)
			.map(EXTENSION, employee.extension)
			.map(FOTO, employee.foto)
			.map(NOTES, employee.notes);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, employee);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Employee> EmployeeRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QEmployee employee = QEmployee.employee;
        
        JPQLQuery<Employee> query = from(employee);
        
        Path<?>[] paths = new Path<?>[] {employee.city,employee.country,employee.name,employee.code,employee.quantityPerUnit,employee.unitCost,employee.unitPrice,employee.unitsInStock,employee.reorderLevel,employee.firstName,employee.lastName,employee.title,employee.birthDate,employee.hireDate,employee.extension,employee.foto,employee.notes};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(employee.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CITY, employee.city)
			.map(COUNTRY, employee.country)
			.map(NAME, employee.name)
			.map(CODE, employee.code)
			.map(QUANTITY_PER_UNIT, employee.quantityPerUnit)
			.map(UNIT_COST, employee.unitCost)
			.map(UNIT_PRICE, employee.unitPrice)
			.map(UNITS_IN_STOCK, employee.unitsInStock)
			.map(REORDER_LEVEL, employee.reorderLevel)
			.map(FIRST_NAME, employee.firstName)
			.map(LAST_NAME, employee.lastName)
			.map(TITLE, employee.title)
			.map(BIRTH_DATE, employee.birthDate)
			.map(HIRE_DATE, employee.hireDate)
			.map(EXTENSION, employee.extension)
			.map(FOTO, employee.foto)
			.map(NOTES, employee.notes);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, employee);
    }
    
}
